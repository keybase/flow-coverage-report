{"version":3,"sources":["../../src/lib/report-badge.js"],"names":["coverageData","opts","percent","threshold","hasFlowErrors","flowStatus","passed","generateFlowCoverageBadge","Promise","resolve","reject","color","badge","colors","err","svg","generateFlowBadge","result","projectDir","outputDir","path","join","flowCoverageSVG","flowSVG","saveBadgeReport","generate"],"mappings":"AAAA;;;;;;;;;;;;;;;sFAaA,iBACEA,YADF,EAEEC,IAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAIQC,mBAJR,GAIkBF,aAAaE,OAJ/B;AAKQC,qBALR,GAKoBF,KAAKE,SAAL,IAAkB,EALtC;AAMQC,yBANR,GAMwB,CAACJ,aAAaK,UAAb,CAAwBC,MANjD;;AAQQC,qCARR,GAQoC,SAA5BA,yBAA4B;AAAA,qBAAM,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvE,oBAAIC,cAAJ;;AAEA,oBAAIT,UAAWC,YAAY,CAA3B,EAA+B;AAC7BQ,0BAAQ,KAAR;AACD,iBAFD,MAEO,IAAIT,UAAWC,YAAY,CAAZ,GAAgB,CAA/B,EAAmC;AACxCQ,0BAAQ,QAAR;AACD,iBAFM,MAEA,IAAIT,UAAWC,YAAY,CAAZ,GAAgB,CAA/B,EAAmC;AACxCQ,0BAAQ,QAAR;AACD,iBAFM,MAEA,IAAIT,UAAWC,YAAY,CAAZ,GAAgB,CAA/B,EAAmC;AACxCQ,0BAAQ,aAAR;AACD,iBAFM,MAEA,IAAIT,UAAUC,SAAd,EAAyB;AAC9BQ,0BAAQ,OAAR;AACD,iBAFM,MAEA;AACLA,0BAAQ,aAAR;AACD;;AAED,uCAAM,eAAN,EAA0BT,OAA1B,QAAsCU,kBAAMC,MAAN,CAAaF,KAAb,CAAtC,EAA2D,UAACG,GAAD,EAAMC,GAAN,EAAc;AACvE,sBAAID,GAAJ,EAAS;AACPJ,2BAAOI,GAAP;AACD,mBAFD,MAEO;AACLL,4BAAQM,GAAR;AACD;AACF,iBAND;AAOD,eAxBuC,CAAN;AAAA,aARpC;;AAkCQC,6BAlCR,GAkC4B,SAApBA,iBAAoB;AAAA,qBAAM,IAAIR,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/D,oBAAMC,QAAQP,gBAAgB,KAAhB,GAAwB,aAAtC;AACA,oBAAMa,SAASb,gBAAgB,SAAhB,GAA4B,SAA3C;;AAEA,uCAAM,MAAN,EAAca,MAAd,EAAsBL,kBAAMC,MAAN,CAAaF,KAAb,CAAtB,EAA2C,UAACG,GAAD,EAAMC,GAAN,EAAc;AACvD,sBAAID,GAAJ,EAAS;AACPJ,2BAAOI,GAAP;AACD,mBAFD,MAEO;AACLL,4BAAQM,GAAR;AACD;AACF,iBAND;AAOD,eAX+B,CAAN;AAAA,aAlC5B;;AA+CQG,sBA/CR,GA+CqBjB,KAAKiB,UA/C1B;AAgDQC,qBAhDR,GAgDoBlB,KAAKkB,SAAL,IAAkBC,eAAKC,IAAL,CAAUH,UAAV,EAAsB,eAAtB,CAhDtC;AAAA;AAAA,mBAkDQ,yBAAOC,SAAP,CAlDR;;AAAA;AAAA;AAAA,mBAmDgCZ,2BAnDhC;;AAAA;AAmDQe,2BAnDR;AAAA;AAAA,mBAoDQ,4BAAUF,eAAKC,IAAL,CAAUF,SAAV,EAAqB,yBAArB,CAAV,EAA2DG,eAA3D,CApDR;;AAAA;AAAA;AAAA,mBAsDwBN,mBAtDxB;;AAAA;AAsDQO,mBAtDR;AAAA;AAAA,mBAuDQ,4BAAUH,eAAKC,IAAL,CAAUF,SAAV,EAAqB,gBAArB,CAAV,EAAkDI,OAAlD,CAvDR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,e;;;;;AATf;;;;AAEA;;;;AAEA;;;;kBA+De;AACbC,YAAUD;AADG,C","file":"report-badge.js","sourcesContent":["'use strict';\n\n// @flow\n\nimport path from 'path';\n\nimport badge from 'badge-up';\n\nimport {mkdirp, writeFile} from './promisified';\n\nimport type {FlowCoverageSummaryData} from './flow';\nimport type {FlowCoverageReportOptions} from './index';\n\nasync function saveBadgeReport(\n  coverageData: FlowCoverageSummaryData,\n  opts: FlowCoverageReportOptions\n): Promise<void> {\n  const percent = coverageData.percent;\n  const threshold = opts.threshold || 80;\n  const hasFlowErrors = !coverageData.flowStatus.passed;\n\n  const generateFlowCoverageBadge = () => new Promise((resolve, reject) => {\n    let color;\n\n    if (percent < (threshold / 2)) {\n      color = 'red';\n    } else if (percent < (threshold * 5 / 8)) {\n      color = 'orange';\n    } else if (percent < (threshold * 6 / 8)) {\n      color = 'yellow';\n    } else if (percent < (threshold * 7 / 8)) {\n      color = 'yellowgreen';\n    } else if (percent < threshold) {\n      color = 'green';\n    } else {\n      color = 'brightgreen';\n    }\n\n    badge('flow-coverage', `${percent}%`, badge.colors[color], (err, svg) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(svg);\n      }\n    });\n  });\n\n  const generateFlowBadge = () => new Promise((resolve, reject) => {\n    const color = hasFlowErrors ? 'red' : 'brightgreen';\n    const result = hasFlowErrors ? 'failing' : 'passing';\n\n    badge('flow', result, badge.colors[color], (err, svg) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(svg);\n      }\n    });\n  });\n\n  const projectDir = opts.projectDir;\n  const outputDir = opts.outputDir || path.join(projectDir, 'flow-coverage');\n\n  await mkdirp(outputDir);\n  const flowCoverageSVG = await generateFlowCoverageBadge();\n  await writeFile(path.join(outputDir, 'flow-coverage-badge.svg'), flowCoverageSVG);\n\n  const flowSVG = await generateFlowBadge();\n  await writeFile(path.join(outputDir, 'flow-badge.svg'), flowSVG);\n}\n\nexport default {\n  generate: saveBadgeReport\n};\n"]}
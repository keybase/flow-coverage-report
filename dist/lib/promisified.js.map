{"version":3,"sources":["../../src/lib/promisified.js"],"names":["exec","mkdirp","readFile","writeFile","glob","withTmpDir","temp","track","command","options","extra","Promise","resolve","reject","err","stdout","stderr","dontReject","path","fs","buff","data","pattern","files","tempFileId","mkdir","dirPath"],"mappings":"AAAA;;;;;QAoBgBA,I,GAAAA,I;QAmBAC,M,GAAAA,M;QAYAC,Q,GAAAA,Q;QAYAC,S,GAAAA,S;QAmBAC,I,GAAAA,I;QAYAC,U,GAAAA,U;;AA1FhB;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACAC,eAAKC,KAAL,G,CAMkD;AAG3C,SAASP,IAAT,CACLQ,OADK,EACYC,OADZ,EAELC,KAFK,EAGgB;AACrB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,6BAASL,OAAT,EAAkBC,OAAlB,EAA2B,UAACK,GAAD,EAAMC,MAAN,EAAcC,MAAd,EAAyB;AAClD,UAAIF,GAAJ,EAAS;AACP,YAAIJ,SAASA,MAAMO,UAAnB,EAA+B;AAC7BL,kBAAQ,EAACE,QAAD,EAAMC,cAAN,EAAcC,cAAd,EAAR;AACD,SAFD,MAEO;AACLH,iBAAOC,GAAP;AACD;AACF,OAND,MAMO;AACLF,gBAAQ,EAACG,cAAD,EAASC,cAAT,EAAR;AACD;AACF,KAVD;AAWD,GAZM,CAAP;AAaD;;AAEM,SAASf,MAAT,CAAgBiB,IAAhB,EAA6C;AAClD,SAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,0BAAUK,IAAV,EAAgB,eAAO;AACrB,UAAIJ,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACD,OAFD,MAEO;AACLF;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD;;AAEM,SAASV,QAAT,CAAkBgB,IAAlB,EAAiD;AACtD,SAAO,IAAIP,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCM,iBAAGjB,QAAH,CAAYgB,IAAZ,EAAkB,UAACJ,GAAD,EAAMM,IAAN,EAAe;AAC/B,UAAIN,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACD,OAFD,MAEO;AACLF,gBAAQQ,IAAR;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD;;AAEM,SAASjB,SAAT,CAAmBe,IAAnB,EAAiCG,IAAjC,EAAqE;AAC1E,SAAO,IAAIV,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCM,iBAAGhB,SAAH,CAAae,IAAb,EAAmBG,IAAnB,EAAyB,eAAO;AAC9B,UAAIP,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACD,OAFD,MAEO;AACLF;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD;;AASM,SAASR,IAAT,CAAckB,OAAd,EAA+Bb,OAA/B,EAA4E;AACjF,SAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,wBAAQS,OAAR,EAAiBb,OAAjB,EAA0B,UAACK,GAAD,EAAMS,KAAN,EAAgB;AACxC,UAAIT,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACD,OAFD,MAEO;AACLF,gBAAQW,KAAR;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD;;AAEM,SAASlB,UAAT,CAAoBmB,UAApB,EAAyD;AAC9D,SAAO,IAAIb,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCP,mBAAKmB,KAAL,CAAWD,UAAX,EAAuB,UAACV,GAAD,EAAMY,OAAN,EAAkB;AACvC,UAAIZ,GAAJ,EAAS;AACPD,eAAOC,GAAP;AACD,OAFD,MAEO;AACLF,gBAAQc,OAAR;AACD;AACF,KAND;AAOD,GARM,CAAP;AASD","file":"promisified.js","sourcesContent":["'use strict';\n\n// @flow\n\nimport {exec as nodeExec} from 'child_process';\nimport fs from 'fs';\nimport npmGlob from 'glob';\nimport npmMkdirp from 'mkdirp';\nimport temp from 'temp';\n\n// Automatically cleanup temp file on process.exit\ntemp.track();\n\nexport type ExecError = Error & {\n  code: number,\n};\nexport type ExecResult = {err?: ExecError, stdout?: string|Buffer, stderr?: string|Buffer};\nexport type ExecOptions = child_process$execOpts; // eslint-disable-line camelcase\nexport type ExecExtras = {dontReject?: boolean};\n\nexport function exec(\n  command: string, options: ExecOptions,\n  extra: ?ExecExtras\n): Promise<ExecResult> {\n  return new Promise((resolve, reject) => {\n    nodeExec(command, options, (err, stdout, stderr) => {\n      if (err) {\n        if (extra && extra.dontReject) {\n          resolve({err, stdout, stderr});\n        } else {\n          reject(err);\n        }\n      } else {\n        resolve({stdout, stderr});\n      }\n    });\n  });\n}\n\nexport function mkdirp(path: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    npmMkdirp(path, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nexport function readFile(path: string): Promise<Buffer> {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, (err, buff) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(buff);\n      }\n    });\n  });\n}\n\nexport function writeFile(path: string, data: string|Buffer): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fs.writeFile(path, data, err => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\nexport type GlobOptions = {\n  cwd?: string,\n  root?: string,\n};\n\nexport type GlobFilelist = Array<string>;\n\nexport function glob(pattern: string, options: GlobOptions): Promise<GlobFilelist> {\n  return new Promise((resolve, reject) => {\n    npmGlob(pattern, options, (err, files) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(files);\n      }\n    });\n  });\n}\n\nexport function withTmpDir(tempFileId: string): Promise<string> {\n  return new Promise((resolve, reject) => {\n    temp.mkdir(tempFileId, (err, dirPath) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(dirPath);\n      }\n    });\n  });\n}\n"]}
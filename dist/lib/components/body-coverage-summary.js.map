{"version":3,"sources":["../../../src/lib/components/body-coverage-summary.jsx"],"names":["HTMLReportBodySummary","props","summary","coverageSummaryData","Error","filenames","Object","keys","files","sort","percent","filesSummaryTableProps","id","className","filesSummaryTable","map","fileSummary","filename","key","fileRowProps","isError","isFlow","flowCoverageParsingError","flowCoverageError","flowCoverageException","flowCoverageStderr","disableLink","threshold","annotation","covered_count","expressions","uncovered_count","meterBar","htmlTemplateOptions","showMeterBar","assets","coverageGeneratedAt"],"mappings":"AAAA;;;;;;;;;;kBAgBwBA,qB;;AAZxB;;;;AAGA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAGA;;AAEe,SAASA,qBAAT,CAA+BC,KAA/B,EAAsE;AACnF,MAAMC,UAAUD,MAAME,mBAAtB;AACA,MAAI,CAACD,OAAL,EAAc;AACZ,UAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AACD;AACD,MAAMC,YAAYC,OAAOC,IAAP,CAAYL,QAAQM,KAApB,EAA2BC,IAA3B,EAAlB;AACA,MAAMC,UAAUR,QAAQQ,OAAxB;;AAEA,MAAMC,yBAAyB;AAC7BC,QAAI,OADyB;AAE7BC,eAAW;AAFkB,GAA/B;AAIA,MAAMC,oBACJ;AAAA;AAAWH,0BAAX;AACE,kCAAC,+BAAD,OADF;AAEE;AAAA;AAAA;AAEIN,gBAAUU,GAAV,CAAc,oBAAY;AACxB,YAAMC,cAAcd,QAAQM,KAAR,CAAcS,QAAd,CAApB;AACA,YAAMC,MAAMD,QAAZ;AACA,YAAME,eAAe;AACnBF,4BADmB;AAEnBG,mBAASJ,YAAYI,OAFF;AAGnBC,kBAAQL,YAAYK,MAHD;AAInBC,oCAA0BN,YAAYM,wBAJnB;AAKnBC,6BAAmBP,YAAYO,iBALZ;AAMnBC,iCAAuBR,YAAYQ,qBANhB;AAOnBC,8BAAoBT,YAAYS,kBAPb;AAQnBC,uBAAa,KARM;AASnBC,qBAAWzB,QAAQyB,SATA;AAUnBC,sBAAYZ,YAAYY,UAVL;AAWnBlB,mBAASM,YAAYN,OAXF;AAYnB;AACAmB,yBAAeb,YAAYc,WAAZ,CAAwBD,aAbpB;AAcnBE,2BAAiBf,YAAYc,WAAZ,CAAwBC;AACzC;AAfmB,SAArB;AAiBA,eAAO,8BAAC,8BAAD,2BAA0B,KAAKb,GAA/B,IAAwCC,YAAxC,EAAP;AACD,OArBD;AAFJ;AAFF,GADF;;AAgCA,MAAIa,iBAAJ;;AAEA,MAAI/B,MAAMgC,mBAAN,IAA6BhC,MAAMgC,mBAAN,CAA0BC,YAA3D,EAAyE;AACvEF,eAAW,8BAAC,0BAAD,IAAsB,SAAStB,OAA/B,EAAwC,WAAWR,QAAQyB,SAA3D,GAAX;AACD;;AAED,SACE;AAAA;AAAA;AACE;AAAA;AAAA,QAAK,WAAU,mBAAf;AACE;AAAA;AAAA,UAAK,WAAU,KAAf;AACE;AAAA;AAAA;AAAA;AAAA;AADF,OADF;AAIE;AAAA;AAAA,UAAK,WAAU,KAAf;AACE;AAAA;AAAA,YAAI,WAAU,WAAd;AAAA;AAAA,SADF;AAEE,sCAAC,8BAAD;AACE,kBAAQ1B,MAAMkC,MADhB;AAEE,+BAAqBlC,MAAMmC,mBAF7B;AAGE,+BAAqBnC,MAAMgC,mBAH7B;AAIE,+BAAqBhC,MAAME;AAJ7B;AAFF,OAJF;AAcI6B,cAdJ;AAgBE;AAAA;AAAA,UAAK,WAAU,KAAf;AACE;AAAA;AAAA,YAAI,WAAU,WAAd;AAAA;AAAA,SADF;AAEGlB;AAFH,OAhBF;AAoBE;AAAA;AAAA,UAAK,WAAU,cAAf;AACE,sCAAC,gBAAD,EAAsBb,KAAtB;AADF;AApBF;AADF,GADF;AA4BD;;AAxFD","file":"body-coverage-summary.js","sourcesContent":["'use strict';\n\n// @flow\n\nimport React from 'react';\n\n/* eslint-disable import/no-unresolved */\nimport HTMLReportFooter from './footer';\nimport FlowCoverageSummaryTable from './coverage-summary-table';\nimport FlowCoverageFileTableHead from './coverage-file-table-head';\nimport FlowCoverageFileTableRow from './coverage-file-table-row';\nimport FlowCoverageMeterBar from './coverage-meter-bar';\n\nimport type {FlowCoverageSummaryReportProps} from './html-report-page';\n/* eslint-enable */\n\nexport default function HTMLReportBodySummary(props: FlowCoverageSummaryReportProps) {\n  const summary = props.coverageSummaryData;\n  if (!summary) {\n    throw new Error('Missing coverageSummaryData from props');\n  }\n  const filenames = Object.keys(summary.files).sort();\n  const percent = summary.percent;\n\n  const filesSummaryTableProps = {\n    id: 'files',\n    className: 'ui small celled table sortable'\n  };\n  const filesSummaryTable = (\n    <table {...filesSummaryTableProps}>\n      <FlowCoverageFileTableHead/>\n      <tbody>\n        {\n          filenames.map(filename => {\n            const fileSummary = summary.files[filename];\n            const key = filename;\n            const fileRowProps = {\n              filename,\n              isError: fileSummary.isError,\n              isFlow: fileSummary.isFlow,\n              flowCoverageParsingError: fileSummary.flowCoverageParsingError,\n              flowCoverageError: fileSummary.flowCoverageError,\n              flowCoverageException: fileSummary.flowCoverageException,\n              flowCoverageStderr: fileSummary.flowCoverageStderr,\n              disableLink: false,\n              threshold: summary.threshold,\n              annotation: fileSummary.annotation,\n              percent: fileSummary.percent,\n              /* eslint-disable camelcase */\n              covered_count: fileSummary.expressions.covered_count,\n              uncovered_count: fileSummary.expressions.uncovered_count\n              /* eslint-enable camelcase */\n            };\n            return <FlowCoverageFileTableRow key={key} {...fileRowProps}/>;\n          })\n        }\n      </tbody>\n    </table>\n  );\n\n  let meterBar;\n\n  if (props.htmlTemplateOptions && props.htmlTemplateOptions.showMeterBar) {\n    meterBar = <FlowCoverageMeterBar percent={percent} threshold={summary.threshold}/>;\n  }\n\n  return (\n    <body>\n      <div className=\"ui grid container\">\n        <div className=\"row\">\n          <h2>Flow Coverage Report</h2>\n        </div>\n        <div className=\"row\">\n          <h4 className=\"ui header\">Summary</h4>\n          <FlowCoverageSummaryTable\n            assets={props.assets}\n            coverageGeneratedAt={props.coverageGeneratedAt}\n            htmlTemplateOptions={props.htmlTemplateOptions}\n            coverageSummaryData={props.coverageSummaryData}\n            />\n        </div>\n        {\n          meterBar\n        }\n        <div className=\"row\">\n          <h4 className=\"ui header\">Files</h4>\n          {filesSummaryTable}\n        </div>\n        <div className=\"row centered\">\n          <HTMLReportFooter {...props}/>\n        </div>\n      </div>\n    </body>\n  );\n}\n"]}